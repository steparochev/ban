Билет №6
1.	Разработать структуру базы данных онлайн кинотеатра в СУБД MySQL;
2.	Разработать структуру базы данных онлайн кинотеатра в СУБД PostgreSQL;
3.	Заполнить таблицы тестовым набором данных.
 
11111111111111111111111
-- Создание базы данных
CREATE DATABASE IF NOT EXISTS online_cinema;

-- Использование базы данных
USE online_cinema;

-- Таблица: Пользователи (Users)
CREATE TABLE Users (
    UserID INT PRIMARY KEY AUTO_INCREMENT,
    Username VARCHAR(255) UNIQUE NOT NULL,
    Password VARCHAR(255) NOT NULL,
    Email VARCHAR(255) UNIQUE NOT NULL,
    RegistrationDate DATETIME,
    FirstName VARCHAR(255),
    LastName VARCHAR(255)
);

-- Таблица: Жанры (Genres)
CREATE TABLE Genres (
    GenreID INT PRIMARY KEY AUTO_INCREMENT,
    GenreName VARCHAR(255) NOT NULL
);

-- Таблица: Фильмы (Movies)
CREATE TABLE Movies (
    MovieID INT PRIMARY KEY AUTO_INCREMENT,
    Title VARCHAR(255) NOT NULL,
    Description TEXT,
    ReleaseYear INT,
    Director VARCHAR(255),
    Duration INT, -- в минутах
    PosterURL VARCHAR(255),  -- Ссылка на постер фильма
    TrailerURL VARCHAR(255), -- Ссылка на трейлер фильма
    VideoURL VARCHAR(255)  -- Ссылка на видео фильма
);

-- Таблица: Фильмы - Жанры (MovieGenres) - Связующая таблица
CREATE TABLE MovieGenres (
    MovieID INT NOT NULL,
    GenreID INT NOT NULL,
    PRIMARY KEY (MovieID, GenreID),
    FOREIGN KEY (MovieID) REFERENCES Movies(MovieID),
    FOREIGN KEY (GenreID) REFERENCES Genres(GenreID)
);

-- Таблица: Подписки (Subscriptions)
CREATE TABLE Subscriptions (
    SubscriptionID INT PRIMARY KEY AUTO_INCREMENT,
    SubscriptionName VARCHAR(255) NOT NULL,
    Price DECIMAL(10, 2) NOT NULL,
    Duration INT, -- в днях
    Description TEXT
);

-- Таблица: Пользователь - Подписка (UserSubscriptions)
CREATE TABLE UserSubscriptions (
    UserID INT NOT NULL,
    SubscriptionID INT NOT NULL,
    StartDate DATE NOT NULL,
    EndDate DATE NOT NULL,
    PRIMARY KEY (UserID, SubscriptionID),
    FOREIGN KEY (UserID) REFERENCES Users(UserID),
    FOREIGN KEY (SubscriptionID) REFERENCES Subscriptions(SubscriptionID)
);

-- Таблица: История просмотров (ViewHistory)
CREATE TABLE ViewHistory (
    ViewID INT PRIMARY KEY AUTO_INCREMENT,
    UserID INT NOT NULL,
    MovieID INT NOT NULL,
    ViewDate DATETIME NOT NULL,
    FOREIGN KEY (UserID) REFERENCES Users(UserID),
    FOREIGN KEY (MovieID) REFERENCES Movies(MovieID)
);

222222222222222222222222222222222222222
-- Создание базы данных
CREATE DATABASE online_cinema;

-- Подключение к базе данных
\c online_cinema

-- Таблица: Пользователи (Users)
CREATE TABLE Users (
    UserID SERIAL PRIMARY KEY,
    Username VARCHAR(255) UNIQUE NOT NULL,
    Password VARCHAR(255) NOT NULL,
    Email VARCHAR(255) UNIQUE NOT NULL,
    RegistrationDate TIMESTAMP,
    FirstName VARCHAR(255),
    LastName VARCHAR(255)
);

-- Таблица: Жанры (Genres)
CREATE TABLE Genres (
    GenreID SERIAL PRIMARY KEY,
    GenreName VARCHAR(255) NOT NULL
);

-- Таблица: Фильмы (Movies)
CREATE TABLE Movies (
    MovieID SERIAL PRIMARY KEY,
    Title VARCHAR(255) NOT NULL,
    Description TEXT,
    ReleaseYear INT,
    Director VARCHAR(255),
    Duration INT, -- в минутах
    PosterURL VARCHAR(255),  -- Ссылка на постер фильма
    TrailerURL VARCHAR(255), -- Ссылка на трейлер фильма
    VideoURL VARCHAR(255)  -- Ссылка на видео фильма
);

-- Таблица: Фильмы - Жанры (MovieGenres) - Связующая таблица
CREATE TABLE MovieGenres (
    MovieID INT NOT NULL,
    GenreID INT NOT NULL,
    PRIMARY KEY (MovieID, GenreID),
    FOREIGN KEY (MovieID) REFERENCES Movies(MovieID),
    FOREIGN KEY (GenreID) REFERENCES Genres(GenreID)
);

-- Таблица: Подписки (Subscriptions)
CREATE TABLE Subscriptions (
    SubscriptionID SERIAL PRIMARY KEY,
    SubscriptionName VARCHAR(255) NOT NULL,
    Price DECIMAL(10, 2) NOT NULL,
    Duration INT, -- в днях
    Description TEXT
);

-- Таблица: Пользователь - Подписка (UserSubscriptions)
CREATE TABLE UserSubscriptions (
    UserID INT NOT NULL,
    SubscriptionID INT NOT NULL,
    StartDate DATE NOT NULL,
    EndDate DATE NOT NULL,
    PRIMARY KEY (UserID, SubscriptionID),
    FOREIGN KEY (UserID) REFERENCES Users(UserID),
    FOREIGN KEY (SubscriptionID) REFERENCES Subscriptions(SubscriptionID)
);

-- Таблица: История просмотров (ViewHistory)
CREATE TABLE ViewHistory (
    ViewID SERIAL PRIMARY KEY,
    UserID INT NOT NULL,
    MovieID INT NOT NULL,
    ViewDate TIMESTAMP NOT NULL,
    FOREIGN KEY (UserID) REFERENCES Users(UserID),
    FOREIGN KEY (MovieID) REFERENCES Movies(MovieID)
);

3333333333333333333333333333333333333
-- Заполнение таблицы Users
INSERT INTO Users (Username, Password, Email, RegistrationDate, FirstName, LastName) VALUES
('johndoe', 'password123', 'john.doe@example.com', '2023-11-01 10:00:00', 'John', 'Doe'),
('janesmith', 'securepass', 'jane.smith@example.com', '2023-11-15 14:30:00', 'Jane', 'Smith');

-- Заполнение таблицы Genres
INSERT INTO Genres (GenreName) VALUES
('Action'),
('Comedy'),
('Drama'),
('Sci-Fi');

-- Заполнение таблицы Movies
INSERT INTO Movies (Title, Description, ReleaseYear, Director, Duration, PosterURL, TrailerURL, VideoURL) VALUES
('The Matrix', 'A computer hacker learns from mysterious rebels about the true nature of his reality', 1999, 'The Wachowskis', 136, 'matrix_poster.jpg', 'matrix_trailer.mp4', 'matrix_movie.mp4'),
('The Shawshank Redemption', 'Two imprisoned men bond over a number of years', 1994, 'Frank Darabont', 142, 'shawshank_poster.jpg', 'shawshank_trailer.mp4', 'shawshank_movie.mp4');

-- Заполнение таблицы MovieGenres
INSERT INTO MovieGenres (MovieID, GenreID) VALUES
(1, 1),
(1, 4),
(2, 3);

-- Заполнение таблицы Subscriptions
INSERT INTO Subscriptions (SubscriptionName, Price, Duration, Description) VALUES
('Basic', 9.99, 30, 'Basic subscription with limited access'),
('Premium', 19.99, 30, 'Premium subscription with full access');

-- Заполнение таблицы UserSubscriptions
INSERT INTO UserSubscriptions (UserID, SubscriptionID, StartDate, EndDate) VALUES
(1, 1, '2023-12-01', '2023-12-31'),
(2, 2, '2023-12-10', '2024-01-09');

-- Заполнение таблицы ViewHistory
INSERT INTO ViewHistory (UserID, MovieID, ViewDate) VALUES
(1, 1, '2023-12-05 20:00:00'),
(2, 2, '2023-12-12 18:00:00');